{"version":3,"sources":["webpack:///./node_modules/iconv-lite/lib/bom-handling.js","webpack:///./node_modules/iconv-lite/encodings/index.js","webpack:///./node_modules/iconv-lite/encodings/internal.js","webpack:///./node_modules/iconv-lite/encodings/utf16.js","webpack:///./node_modules/iconv-lite/encodings/utf7.js","webpack:///./node_modules/iconv-lite/encodings/sbcs-codec.js","webpack:///./node_modules/iconv-lite/encodings/sbcs-data.js","webpack:///./node_modules/iconv-lite/encodings/sbcs-data-generated.js","webpack:///./node_modules/iconv-lite/encodings/dbcs-codec.js","webpack:///./node_modules/iconv-lite/encodings/dbcs-data.js","webpack:///./node_modules/iconv-lite/lib/streams.js","webpack:///./node_modules/iconv-lite/lib/extend-node.js","webpack:///./node_modules/iconv-lite/lib/index.js"],"names":["PrependBOMWrapper","encoder","options","this","addBOM","StripBOMWrapper","decoder","pass","exports","PrependBOM","prototype","write","str","end","StripBOM","buf","res","slice","stripBOM","modules","i","length","module","enc","Object","hasOwnProperty","call","Buffer","InternalCodec","codecOptions","iconv","encodingName","bomAware","InternalEncoderBase64","InternalEncoderCesu8","toString","InternalDecoderCesu8","defaultCharUnicode","utf8","type","cesu8","unicode11utf8","ucs2","utf16le","binary","base64","hex","_internal","InternalEncoder","InternalDecoder","StringDecoder","codec","prevStr","acc","contBytes","accBytes","completeQuads","bufIdx","charCode","charCodeAt","curByte","String","fromCharCode","Utf16BECodec","Utf16BEEncoder","Utf16BEDecoder","overflowByte","Utf16Codec","Utf16Encoder","undefined","getEncoder","Utf16Decoder","initialBytes","initialBytesLen","detectEncoding","defaultEncoding","asciiCharsLE","asciiCharsBE","_len","Math","min","utf16be","tmp","buf2","j","utf16","push","encoding","concat","getDecoder","trail","Utf7Codec","utf7","unicode11utf7","Utf7Encoder","Utf7Decoder","nonDirectChars","inBase64","base64Accum","replace","chunk","encode","bind","base64Regex","base64Chars","test","plusChar","minusChar","andChar","Utf7IMAPCodec","Utf7IMAPEncoder","base64AccumIdx","Utf7IMAPDecoder","lastI","b64str","decode","canBeDecoded","utf7imap","uChar","base64IMAPChars","SBCSCodec","Error","chars","asciiString","decodeBuf","encodeBuf","fill","defaultCharSingleByte","SBCSEncoder","SBCSDecoder","_sbcs","newBuf","idx1","idx2","_dbcs","DBCSCodec","UNASSIGNED_NODE","Array","table","mappingTable","decodeTables","decodeTableSeq","_addDecodeChunk","encodeTable","encodeTableSeq","skipEncodeChars","encodeSkipVals","val","from","to","_fillEncodeTable","encodeAdd","_setEncodeChar","defCharSB","gb18030","thirdByteNodeIdx","thirdByteNode","fourthByteNodeIdx","fourthByteNode","secondByteNodeIdx","secondByteNode","DBCSEncoder","leadSurrogate","seqObj","DBCSDecoder","nodeIdx","prevBuf","findIdx","l","r","mid","floor","_getDecodeTrieNode","addr","bytes","node","curAddr","parseInt","writeTable","k","part","code","codeTrail","len","seq","m","_getEncodeBucket","uCode","high","dbcsCode","bucket","low","_setEncodeSequence","oldVal","prefix","mbCode","nextChar","resCode","subtable","idx","uChars","gbChars","prevBufOffset","seqStart","curSeq","ptr","uCodeLead","ret","Transform","IconvLiteEncoderStream","conv","decodeStrings","IconvLiteDecoderStream","encodeStream","decodeStream","supportsStreams","_collect","collect","create","constructor","value","_transform","done","e","_flush","cb","chunks","on","isBuffer","original","supportsNodeEncodingsExtension","Uint8Array","extendNodeEncodings","console","error","nodeNativeEncodings","isNativeEncoding","toLowerCase","SlowBuffer","SlowBufferToString","start","SlowBufferWrite","string","offset","isFinite","swap","remaining","RangeError","copy","BufferIsEncoding","isEncoding","encodingExists","BufferByteLength","byteLength","BufferToString","BufferWrite","_offset","_length","_encoding","Readable","ReadableSetEncoding","setEncoding","_readableState","undoExtendNodeEncodings","bomHandling","encodings","skipDecodeWarning","getCodec","toEncoding","fromEncoding","_codecDataCache","codecDef","key","nodeVer","process","versions","nodeVerArr","split","map","Number"],"mappings":"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","file":"vendors~iconv-lite.9c0962a35e7a88828f65.js","sourcesContent":["\"use strict\";\n\nvar BOMChar = '\\uFEFF';\n\nexports.PrependBOM = PrependBOMWrapper\nfunction PrependBOMWrapper(encoder, options) {\n    this.encoder = encoder;\n    this.addBOM = true;\n}\n\nPrependBOMWrapper.prototype.write = function(str) {\n    if (this.addBOM) {\n        str = BOMChar + str;\n        this.addBOM = false;\n    }\n\n    return this.encoder.write(str);\n}\n\nPrependBOMWrapper.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n//------------------------------------------------------------------------------\n\nexports.StripBOM = StripBOMWrapper;\nfunction StripBOMWrapper(decoder, options) {\n    this.decoder = decoder;\n    this.pass = false;\n    this.options = options || {};\n}\n\nStripBOMWrapper.prototype.write = function(buf) {\n    var res = this.decoder.write(buf);\n    if (this.pass || !res)\n        return res;\n\n    if (res[0] === BOMChar) {\n        res = res.slice(1);\n        if (typeof this.options.stripBOM === 'function')\n            this.options.stripBOM();\n    }\n\n    this.pass = true;\n    return res;\n}\n\nStripBOMWrapper.prototype.end = function() {\n    return this.decoder.end();\n}\n\n","\"use strict\";\n\n// Update this array if you add/rename/remove files in this directory.\n// We support Browserify by skipping automatic module discovery and requiring modules directly.\nvar modules = [\n    require(\"./internal\"),\n    require(\"./utf16\"),\n    require(\"./utf7\"),\n    require(\"./sbcs-codec\"),\n    require(\"./sbcs-data\"),\n    require(\"./sbcs-data-generated\"),\n    require(\"./dbcs-codec\"),\n    require(\"./dbcs-data\"),\n];\n\n// Put all encoding/alias/codec definitions to single object and export it. \nfor (var i = 0; i < modules.length; i++) {\n    var module = modules[i];\n    for (var enc in module)\n        if (Object.prototype.hasOwnProperty.call(module, enc))\n            exports[enc] = module[enc];\n}\n","\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  { type: \"_internal\", bomAware: true},\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n    else if (this.enc === \"cesu8\") {\n        this.enc = \"utf8\"; // Use utf8 for decoding.\n        this.encoder = InternalEncoderCesu8;\n\n        // Add decoder for versions of Node not supporting CESU-8\n        if (new Buffer('eda0bdedb2a9', 'hex').toString() !== '💩') {\n            this.decoder = InternalDecoderCesu8;\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\n        }\n    }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. Its signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype;\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return new Buffer(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return new Buffer(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return new Buffer(this.prevStr, \"base64\");\n}\n\n\n//------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\nfunction InternalEncoderCesu8(options, codec) {\n}\n\nInternalEncoderCesu8.prototype.write = function(str) {\n    var buf = new Buffer(str.length * 3), bufIdx = 0;\n    for (var i = 0; i < str.length; i++) {\n        var charCode = str.charCodeAt(i);\n        // Naive implementation, but it works because CESU-8 is especially easy\n        // to convert from UTF-16 (which all JS strings are encoded in).\n        if (charCode < 0x80)\n            buf[bufIdx++] = charCode;\n        else if (charCode < 0x800) {\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n        else { // charCode will always be < 0x10000 in javascript.\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n    }\n    return buf.slice(0, bufIdx);\n}\n\nInternalEncoderCesu8.prototype.end = function() {\n}\n\n//------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\nfunction InternalDecoderCesu8(options, codec) {\n    this.acc = 0;\n    this.contBytes = 0;\n    this.accBytes = 0;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function(buf) {\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \n        res = '';\n    for (var i = 0; i < buf.length; i++) {\n        var curByte = buf[i];\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\n            if (contBytes > 0) { // Previous code is invalid\n                res += this.defaultCharUnicode;\n                contBytes = 0;\n            }\n\n            if (curByte < 0x80) { // Single-byte code\n                res += String.fromCharCode(curByte);\n            } else if (curByte < 0xE0) { // Two-byte code\n                acc = curByte & 0x1F;\n                contBytes = 1; accBytes = 1;\n            } else if (curByte < 0xF0) { // Three-byte code\n                acc = curByte & 0x0F;\n                contBytes = 2; accBytes = 1;\n            } else { // Four or more are not supported for CESU-8.\n                res += this.defaultCharUnicode;\n            }\n        } else { // Continuation byte\n            if (contBytes > 0) { // We're waiting for it.\n                acc = (acc << 6) | (curByte & 0x3f);\n                contBytes--; accBytes++;\n                if (contBytes === 0) {\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\n                        res += this.defaultCharUnicode;\n                    else if (accBytes === 3 && acc < 0x800)\n                        res += this.defaultCharUnicode;\n                    else\n                        // Actually add character.\n                        res += String.fromCharCode(acc);\n                }\n            } else { // Unexpected continuation byte\n                res += this.defaultCharUnicode;\n            }\n        }\n    }\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\n    return res;\n}\n\nInternalDecoderCesu8.prototype.end = function() {\n    var res = 0;\n    if (this.contBytes > 0)\n        res += this.defaultCharUnicode;\n    return res;\n}\n","\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = new Buffer(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = new Buffer(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n","\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return new Buffer(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = new Buffer(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = new Buffer(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = new Buffer(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n","\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = new Buffer(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = new Buffer(65536);\n    encodeBuf.fill(iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = new Buffer(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = new Buffer(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n","\"use strict\";\n\n// Manually added data to be used by sbcs codec in addition to generated one.\n\nmodule.exports = {\n    // Not supported by iconv, not sure why.\n    \"10029\": \"maccenteuro\",\n    \"maccenteuro\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\"\n    },\n\n    \"808\": \"cp808\",\n    \"ibm808\": \"cp808\",\n    \"cp808\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ \"\n    },\n\n    // Aliases of generated encodings.\n    \"ascii8bit\": \"ascii\",\n    \"usascii\": \"ascii\",\n    \"ansix34\": \"ascii\",\n    \"ansix341968\": \"ascii\",\n    \"ansix341986\": \"ascii\",\n    \"csascii\": \"ascii\",\n    \"cp367\": \"ascii\",\n    \"ibm367\": \"ascii\",\n    \"isoir6\": \"ascii\",\n    \"iso646us\": \"ascii\",\n    \"iso646irv\": \"ascii\",\n    \"us\": \"ascii\",\n\n    \"latin1\": \"iso88591\",\n    \"latin2\": \"iso88592\",\n    \"latin3\": \"iso88593\",\n    \"latin4\": \"iso88594\",\n    \"latin5\": \"iso88599\",\n    \"latin6\": \"iso885910\",\n    \"latin7\": \"iso885913\",\n    \"latin8\": \"iso885914\",\n    \"latin9\": \"iso885915\",\n    \"latin10\": \"iso885916\",\n\n    \"csisolatin1\": \"iso88591\",\n    \"csisolatin2\": \"iso88592\",\n    \"csisolatin3\": \"iso88593\",\n    \"csisolatin4\": \"iso88594\",\n    \"csisolatincyrillic\": \"iso88595\",\n    \"csisolatinarabic\": \"iso88596\",\n    \"csisolatingreek\" : \"iso88597\",\n    \"csisolatinhebrew\": \"iso88598\",\n    \"csisolatin5\": \"iso88599\",\n    \"csisolatin6\": \"iso885910\",\n\n    \"l1\": \"iso88591\",\n    \"l2\": \"iso88592\",\n    \"l3\": \"iso88593\",\n    \"l4\": \"iso88594\",\n    \"l5\": \"iso88599\",\n    \"l6\": \"iso885910\",\n    \"l7\": \"iso885913\",\n    \"l8\": \"iso885914\",\n    \"l9\": \"iso885915\",\n    \"l10\": \"iso885916\",\n\n    \"isoir14\": \"iso646jp\",\n    \"isoir57\": \"iso646cn\",\n    \"isoir100\": \"iso88591\",\n    \"isoir101\": \"iso88592\",\n    \"isoir109\": \"iso88593\",\n    \"isoir110\": \"iso88594\",\n    \"isoir144\": \"iso88595\",\n    \"isoir127\": \"iso88596\",\n    \"isoir126\": \"iso88597\",\n    \"isoir138\": \"iso88598\",\n    \"isoir148\": \"iso88599\",\n    \"isoir157\": \"iso885910\",\n    \"isoir166\": \"tis620\",\n    \"isoir179\": \"iso885913\",\n    \"isoir199\": \"iso885914\",\n    \"isoir203\": \"iso885915\",\n    \"isoir226\": \"iso885916\",\n\n    \"cp819\": \"iso88591\",\n    \"ibm819\": \"iso88591\",\n\n    \"cyrillic\": \"iso88595\",\n\n    \"arabic\": \"iso88596\",\n    \"arabic8\": \"iso88596\",\n    \"ecma114\": \"iso88596\",\n    \"asmo708\": \"iso88596\",\n\n    \"greek\" : \"iso88597\",\n    \"greek8\" : \"iso88597\",\n    \"ecma118\" : \"iso88597\",\n    \"elot928\" : \"iso88597\",\n\n    \"hebrew\": \"iso88598\",\n    \"hebrew8\": \"iso88598\",\n\n    \"turkish\": \"iso88599\",\n    \"turkish8\": \"iso88599\",\n\n    \"thai\": \"iso885911\",\n    \"thai8\": \"iso885911\",\n\n    \"celtic\": \"iso885914\",\n    \"celtic8\": \"iso885914\",\n    \"isoceltic\": \"iso885914\",\n\n    \"tis6200\": \"tis620\",\n    \"tis62025291\": \"tis620\",\n    \"tis62025330\": \"tis620\",\n\n    \"10000\": \"macroman\",\n    \"10006\": \"macgreek\",\n    \"10007\": \"maccyrillic\",\n    \"10079\": \"maciceland\",\n    \"10081\": \"macturkish\",\n\n    \"cspc8codepage437\": \"cp437\",\n    \"cspc775baltic\": \"cp775\",\n    \"cspc850multilingual\": \"cp850\",\n    \"cspcp852\": \"cp852\",\n    \"cspc862latinhebrew\": \"cp862\",\n    \"cpgr\": \"cp869\",\n\n    \"msee\": \"cp1250\",\n    \"mscyrl\": \"cp1251\",\n    \"msansi\": \"cp1252\",\n    \"msgreek\": \"cp1253\",\n    \"msturk\": \"cp1254\",\n    \"mshebr\": \"cp1255\",\n    \"msarab\": \"cp1256\",\n    \"winbaltrim\": \"cp1257\",\n\n    \"cp20866\": \"koi8r\",\n    \"20866\": \"koi8r\",\n    \"ibm878\": \"koi8r\",\n    \"cskoi8r\": \"koi8r\",\n\n    \"cp21866\": \"koi8u\",\n    \"21866\": \"koi8u\",\n    \"ibm1168\": \"koi8u\",\n\n    \"strk10482002\": \"rk1048\",\n\n    \"tcvn5712\": \"tcvn\",\n    \"tcvn57121\": \"tcvn\",\n\n    \"gb198880\": \"iso646cn\",\n    \"cn\": \"iso646cn\",\n\n    \"csiso14jisc6220ro\": \"iso646jp\",\n    \"jisc62201969ro\": \"iso646jp\",\n    \"jp\": \"iso646jp\",\n\n    \"cshproman8\": \"hproman8\",\n    \"r8\": \"hproman8\",\n    \"roman8\": \"hproman8\",\n    \"xroman8\": \"hproman8\",\n    \"ibm1051\": \"hproman8\",\n\n    \"mac\": \"macintosh\",\n    \"csmacintosh\": \"macintosh\",\n};\n\n","\"use strict\";\n\n// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.\nmodule.exports = {\n  \"437\": \"cp437\",\n  \"737\": \"cp737\",\n  \"775\": \"cp775\",\n  \"850\": \"cp850\",\n  \"852\": \"cp852\",\n  \"855\": \"cp855\",\n  \"856\": \"cp856\",\n  \"857\": \"cp857\",\n  \"858\": \"cp858\",\n  \"860\": \"cp860\",\n  \"861\": \"cp861\",\n  \"862\": \"cp862\",\n  \"863\": \"cp863\",\n  \"864\": \"cp864\",\n  \"865\": \"cp865\",\n  \"866\": \"cp866\",\n  \"869\": \"cp869\",\n  \"874\": \"windows874\",\n  \"922\": \"cp922\",\n  \"1046\": \"cp1046\",\n  \"1124\": \"cp1124\",\n  \"1125\": \"cp1125\",\n  \"1129\": \"cp1129\",\n  \"1133\": \"cp1133\",\n  \"1161\": \"cp1161\",\n  \"1162\": \"cp1162\",\n  \"1163\": \"cp1163\",\n  \"1250\": \"windows1250\",\n  \"1251\": \"windows1251\",\n  \"1252\": \"windows1252\",\n  \"1253\": \"windows1253\",\n  \"1254\": \"windows1254\",\n  \"1255\": \"windows1255\",\n  \"1256\": \"windows1256\",\n  \"1257\": \"windows1257\",\n  \"1258\": \"windows1258\",\n  \"28591\": \"iso88591\",\n  \"28592\": \"iso88592\",\n  \"28593\": \"iso88593\",\n  \"28594\": \"iso88594\",\n  \"28595\": \"iso88595\",\n  \"28596\": \"iso88596\",\n  \"28597\": \"iso88597\",\n  \"28598\": \"iso88598\",\n  \"28599\": \"iso88599\",\n  \"28600\": \"iso885910\",\n  \"28601\": \"iso885911\",\n  \"28603\": \"iso885913\",\n  \"28604\": \"iso885914\",\n  \"28605\": \"iso885915\",\n  \"28606\": \"iso885916\",\n  \"windows874\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"win874\": \"windows874\",\n  \"cp874\": \"windows874\",\n  \"windows1250\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"win1250\": \"windows1250\",\n  \"cp1250\": \"windows1250\",\n  \"windows1251\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"win1251\": \"windows1251\",\n  \"cp1251\": \"windows1251\",\n  \"windows1252\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"win1252\": \"windows1252\",\n  \"cp1252\": \"windows1252\",\n  \"windows1253\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"win1253\": \"windows1253\",\n  \"cp1253\": \"windows1253\",\n  \"windows1254\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"win1254\": \"windows1254\",\n  \"cp1254\": \"windows1254\",\n  \"windows1255\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"win1255\": \"windows1255\",\n  \"cp1255\": \"windows1255\",\n  \"windows1256\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\"\n  },\n  \"win1256\": \"windows1256\",\n  \"cp1256\": \"windows1256\",\n  \"windows1257\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙\"\n  },\n  \"win1257\": \"windows1257\",\n  \"cp1257\": \"windows1257\",\n  \"windows1258\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"win1258\": \"windows1258\",\n  \"cp1258\": \"windows1258\",\n  \"iso88591\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28591\": \"iso88591\",\n  \"iso88592\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"cp28592\": \"iso88592\",\n  \"iso88593\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙\"\n  },\n  \"cp28593\": \"iso88593\",\n  \"iso88594\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙\"\n  },\n  \"cp28594\": \"iso88594\",\n  \"iso88595\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ\"\n  },\n  \"cp28595\": \"iso88595\",\n  \"iso88596\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������\"\n  },\n  \"cp28596\": \"iso88596\",\n  \"iso88597\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"cp28597\": \"iso88597\",\n  \"iso88598\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"cp28598\": \"iso88598\",\n  \"iso88599\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"cp28599\": \"iso88599\",\n  \"iso885910\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ\"\n  },\n  \"cp28600\": \"iso885910\",\n  \"iso885911\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"cp28601\": \"iso885911\",\n  \"iso885913\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’\"\n  },\n  \"cp28603\": \"iso885913\",\n  \"iso885914\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ\"\n  },\n  \"cp28604\": \"iso885914\",\n  \"iso885915\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28605\": \"iso885915\",\n  \"iso885916\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ\"\n  },\n  \"cp28606\": \"iso885916\",\n  \"cp437\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm437\": \"cp437\",\n  \"csibm437\": \"cp437\",\n  \"cp737\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm737\": \"cp737\",\n  \"csibm737\": \"cp737\",\n  \"cp775\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ \"\n  },\n  \"ibm775\": \"cp775\",\n  \"csibm775\": \"cp775\",\n  \"cp850\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm850\": \"cp850\",\n  \"csibm850\": \"cp850\",\n  \"cp852\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ \"\n  },\n  \"ibm852\": \"cp852\",\n  \"csibm852\": \"cp852\",\n  \"cp855\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ \"\n  },\n  \"ibm855\": \"cp855\",\n  \"csibm855\": \"cp855\",\n  \"cp856\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm856\": \"cp856\",\n  \"csibm856\": \"cp856\",\n  \"cp857\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm857\": \"cp857\",\n  \"csibm857\": \"cp857\",\n  \"cp858\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm858\": \"cp858\",\n  \"csibm858\": \"cp858\",\n  \"cp860\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm860\": \"cp860\",\n  \"csibm860\": \"cp860\",\n  \"cp861\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm861\": \"cp861\",\n  \"csibm861\": \"cp861\",\n  \"cp862\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm862\": \"cp862\",\n  \"csibm862\": \"cp862\",\n  \"cp863\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm863\": \"cp863\",\n  \"csibm863\": \"cp863\",\n  \"cp864\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�\"\n  },\n  \"ibm864\": \"cp864\",\n  \"csibm864\": \"cp864\",\n  \"cp865\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm865\": \"cp865\",\n  \"csibm865\": \"cp865\",\n  \"cp866\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ \"\n  },\n  \"ibm866\": \"cp866\",\n  \"csibm866\": \"cp866\",\n  \"cp869\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ \"\n  },\n  \"ibm869\": \"cp869\",\n  \"csibm869\": \"cp869\",\n  \"cp922\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ\"\n  },\n  \"ibm922\": \"cp922\",\n  \"csibm922\": \"cp922\",\n  \"cp1046\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�\"\n  },\n  \"ibm1046\": \"cp1046\",\n  \"csibm1046\": \"cp1046\",\n  \"cp1124\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ\"\n  },\n  \"ibm1124\": \"cp1124\",\n  \"csibm1124\": \"cp1124\",\n  \"cp1125\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ \"\n  },\n  \"ibm1125\": \"cp1125\",\n  \"csibm1125\": \"cp1125\",\n  \"cp1129\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1129\": \"cp1129\",\n  \"csibm1129\": \"cp1129\",\n  \"cp1133\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�\"\n  },\n  \"ibm1133\": \"cp1133\",\n  \"csibm1133\": \"cp1133\",\n  \"cp1161\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ \"\n  },\n  \"ibm1161\": \"cp1161\",\n  \"csibm1161\": \"cp1161\",\n  \"cp1162\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"ibm1162\": \"cp1162\",\n  \"csibm1162\": \"cp1162\",\n  \"cp1163\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1163\": \"cp1163\",\n  \"csibm1163\": \"cp1163\",\n  \"maccroatian\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ\"\n  },\n  \"maccyrillic\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"macgreek\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�\"\n  },\n  \"maciceland\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macroman\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macromania\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macthai\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����\"\n  },\n  \"macturkish\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macukraine\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"koi8r\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8u\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8ru\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8t\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"armscii8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�\"\n  },\n  \"rk1048\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"tcvn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000ÚỤ\\u0003ỪỬỮ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010ỨỰỲỶỸÝỴ\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ\"\n  },\n  \"georgianacademy\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"georgianps\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"pt154\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"viscii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001Ẳ\\u0003\\u0004ẴẪ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013Ỷ\\u0015\\u0016\\u0017\\u0018Ỹ\\u001a\\u001b\\u001c\\u001dỴ\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ\"\n  },\n  \"iso646cn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"iso646jp\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"hproman8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�\"\n  },\n  \"macintosh\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"ascii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"tis620\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  }\n}","\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.\n// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.\n// To save memory and loading time, we read table files only when requested.\n\nexports._dbcs = DBCSCodec;\n\nvar UNASSIGNED = -1,\n    GB18030_CODE = -2,\n    SEQ_START  = -10,\n    NODE_START = -1000,\n    UNASSIGNED_NODE = new Array(0x100),\n    DEF_CHAR = -1;\n\nfor (var i = 0; i < 0x100; i++)\n    UNASSIGNED_NODE[i] = UNASSIGNED;\n\n\n// Class DBCSCodec reads and initializes mapping tables.\nfunction DBCSCodec(codecOptions, iconv) {\n    this.encodingName = codecOptions.encodingName;\n    if (!codecOptions)\n        throw new Error(\"DBCS codec is called without the data.\")\n    if (!codecOptions.table)\n        throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\n\n    // Load tables.\n    var mappingTable = codecOptions.table();\n\n\n    // Decode tables: MBCS -> Unicode.\n\n    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.\n    // Trie root is decodeTables[0].\n    // Values: >=  0 -> unicode character code. can be > 0xFFFF\n    //         == UNASSIGNED -> unknown/unassigned sequence.\n    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.\n    //         <= NODE_START -> index of the next node in our trie to process next byte.\n    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.\n    this.decodeTables = [];\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.\n\n    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. \n    this.decodeTableSeq = [];\n\n    // Actual mapping tables consist of chunks. Use them to fill up decode tables.\n    for (var i = 0; i < mappingTable.length; i++)\n        this._addDecodeChunk(mappingTable[i]);\n\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\n\n    \n    // Encode tables: Unicode -> DBCS.\n\n    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.\n    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.\n    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).\n    //         == UNASSIGNED -> no conversion found. Output a default char.\n    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.\n    this.encodeTable = [];\n    \n    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of\n    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key\n    // means end of sequence (needed when one sequence is a strict subsequence of another).\n    // Objects are kept separately from encodeTable to increase performance.\n    this.encodeTableSeq = [];\n\n    // Some chars can be decoded, but need not be encoded.\n    var skipEncodeChars = {};\n    if (codecOptions.encodeSkipVals)\n        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\n            var val = codecOptions.encodeSkipVals[i];\n            if (typeof val === 'number')\n                skipEncodeChars[val] = true;\n            else\n                for (var j = val.from; j <= val.to; j++)\n                    skipEncodeChars[j] = true;\n        }\n        \n    // Use decode trie to recursively fill out encode tables.\n    this._fillEncodeTable(0, 0, skipEncodeChars);\n\n    // Add more encoding pairs when needed.\n    if (codecOptions.encodeAdd) {\n        for (var uChar in codecOptions.encodeAdd)\n            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\n                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\n    }\n\n    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = \"?\".charCodeAt(0);\n\n\n    // Load & create GB18030 tables when needed.\n    if (typeof codecOptions.gb18030 === 'function') {\n        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.\n\n        // Add GB18030 decode tables.\n        var thirdByteNodeIdx = this.decodeTables.length;\n        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        var fourthByteNodeIdx = this.decodeTables.length;\n        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        for (var i = 0x81; i <= 0xFE; i++) {\n            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];\n            var secondByteNode = this.decodeTables[secondByteNodeIdx];\n            for (var j = 0x30; j <= 0x39; j++)\n                secondByteNode[j] = NODE_START - thirdByteNodeIdx;\n        }\n        for (var i = 0x81; i <= 0xFE; i++)\n            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;\n        for (var i = 0x30; i <= 0x39; i++)\n            fourthByteNode[i] = GB18030_CODE\n    }        \n}\n\nDBCSCodec.prototype.encoder = DBCSEncoder;\nDBCSCodec.prototype.decoder = DBCSDecoder;\n\n// Decoder helpers\nDBCSCodec.prototype._getDecodeTrieNode = function(addr) {\n    var bytes = [];\n    for (; addr > 0; addr >>= 8)\n        bytes.push(addr & 0xFF);\n    if (bytes.length == 0)\n        bytes.push(0);\n\n    var node = this.decodeTables[0];\n    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.\n        var val = node[bytes[i]];\n\n        if (val == UNASSIGNED) { // Create new node.\n            node[bytes[i]] = NODE_START - this.decodeTables.length;\n            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\n        }\n        else if (val <= NODE_START) { // Existing node.\n            node = this.decodeTables[NODE_START - val];\n        }\n        else\n            throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\n    }\n    return node;\n}\n\n\nDBCSCodec.prototype._addDecodeChunk = function(chunk) {\n    // First element of chunk is the hex mbcs code where we start.\n    var curAddr = parseInt(chunk[0], 16);\n\n    // Choose the decoding node where we'll write our chars.\n    var writeTable = this._getDecodeTrieNode(curAddr);\n    curAddr = curAddr & 0xFF;\n\n    // Write all other elements of the chunk to the table.\n    for (var k = 1; k < chunk.length; k++) {\n        var part = chunk[k];\n        if (typeof part === \"string\") { // String, write as-is.\n            for (var l = 0; l < part.length;) {\n                var code = part.charCodeAt(l++);\n                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate\n                    var codeTrail = part.charCodeAt(l++);\n                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)\n                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\n                    else\n                        throw new Error(\"Incorrect surrogate pair in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n                }\n                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)\n                    var len = 0xFFF - code + 2;\n                    var seq = [];\n                    for (var m = 0; m < len; m++)\n                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.\n\n                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\n                    this.decodeTableSeq.push(seq);\n                }\n                else\n                    writeTable[curAddr++] = code; // Basic char\n            }\n        } \n        else if (typeof part === \"number\") { // Integer, meaning increasing sequence starting with prev character.\n            var charCode = writeTable[curAddr - 1] + 1;\n            for (var l = 0; l < part; l++)\n                writeTable[curAddr++] = charCode++;\n        }\n        else\n            throw new Error(\"Incorrect type '\" + typeof part + \"' given in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n    }\n    if (curAddr > 0xFF)\n        throw new Error(\"Incorrect chunk in \"  + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\n}\n\n// Encoder helpers\nDBCSCodec.prototype._getEncodeBucket = function(uCode) {\n    var high = uCode >> 8; // This could be > 0xFF because of astral characters.\n    if (this.encodeTable[high] === undefined)\n        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.\n    return this.encodeTable[high];\n}\n\nDBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    if (bucket[low] <= SEQ_START)\n        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.\n    else if (bucket[low] == UNASSIGNED)\n        bucket[low] = dbcsCode;\n}\n\nDBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\n    \n    // Get the root of character tree according to first character of the sequence.\n    var uCode = seq[0];\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n\n    var node;\n    if (bucket[low] <= SEQ_START) {\n        // There's already a sequence with  - use it.\n        node = this.encodeTableSeq[SEQ_START-bucket[low]];\n    }\n    else {\n        // There was no sequence object - allocate a new one.\n        node = {};\n        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.\n        bucket[low] = SEQ_START - this.encodeTableSeq.length;\n        this.encodeTableSeq.push(node);\n    }\n\n    // Traverse the character tree, allocating new nodes as needed.\n    for (var j = 1; j < seq.length-1; j++) {\n        var oldVal = node[uCode];\n        if (typeof oldVal === 'object')\n            node = oldVal;\n        else {\n            node = node[uCode] = {}\n            if (oldVal !== undefined)\n                node[DEF_CHAR] = oldVal\n        }\n    }\n\n    // Set the leaf to given dbcsCode.\n    uCode = seq[seq.length-1];\n    node[uCode] = dbcsCode;\n}\n\nDBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\n    var node = this.decodeTables[nodeIdx];\n    for (var i = 0; i < 0x100; i++) {\n        var uCode = node[i];\n        var mbCode = prefix + i;\n        if (skipEncodeChars[mbCode])\n            continue;\n\n        if (uCode >= 0)\n            this._setEncodeChar(uCode, mbCode);\n        else if (uCode <= NODE_START)\n            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);\n        else if (uCode <= SEQ_START)\n            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\n    }\n}\n\n\n\n// == Encoder ==================================================================\n\nfunction DBCSEncoder(options, codec) {\n    // Encoder state\n    this.leadSurrogate = -1;\n    this.seqObj = undefined;\n    \n    // Static data\n    this.encodeTable = codec.encodeTable;\n    this.encodeTableSeq = codec.encodeTableSeq;\n    this.defaultCharSingleByte = codec.defCharSB;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSEncoder.prototype.write = function(str) {\n    var newBuf = new Buffer(str.length * (this.gb18030 ? 4 : 3)), \n        leadSurrogate = this.leadSurrogate,\n        seqObj = this.seqObj, nextChar = -1,\n        i = 0, j = 0;\n\n    while (true) {\n        // 0. Get next character.\n        if (nextChar === -1) {\n            if (i == str.length) break;\n            var uCode = str.charCodeAt(i++);\n        }\n        else {\n            var uCode = nextChar;\n            nextChar = -1;    \n        }\n\n        // 1. Handle surrogates.\n        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.\n            if (uCode < 0xDC00) { // We've got lead surrogate.\n                if (leadSurrogate === -1) {\n                    leadSurrogate = uCode;\n                    continue;\n                } else {\n                    leadSurrogate = uCode;\n                    // Double lead surrogate found.\n                    uCode = UNASSIGNED;\n                }\n            } else { // We've got trail surrogate.\n                if (leadSurrogate !== -1) {\n                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\n                    leadSurrogate = -1;\n                } else {\n                    // Incomplete surrogate pair - only trail surrogate found.\n                    uCode = UNASSIGNED;\n                }\n                \n            }\n        }\n        else if (leadSurrogate !== -1) {\n            // Incomplete surrogate pair - only lead surrogate found.\n            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.\n            leadSurrogate = -1;\n        }\n\n        // 2. Convert uCode character.\n        var dbcsCode = UNASSIGNED;\n        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence\n            var resCode = seqObj[uCode];\n            if (typeof resCode === 'object') { // Sequence continues.\n                seqObj = resCode;\n                continue;\n\n            } else if (typeof resCode == 'number') { // Sequence finished. Write it.\n                dbcsCode = resCode;\n\n            } else if (resCode == undefined) { // Current character is not part of the sequence.\n\n                // Try default character for this sequence\n                resCode = seqObj[DEF_CHAR];\n                if (resCode !== undefined) {\n                    dbcsCode = resCode; // Found. Write it.\n                    nextChar = uCode; // Current character will be written too in the next iteration.\n\n                } else {\n                    // TODO: What if we have no default? (resCode == undefined)\n                    // Then, we should write first char of the sequence as-is and try the rest recursively.\n                    // Didn't do it for now because no encoding has this situation yet.\n                    // Currently, just skip the sequence and write current char.\n                }\n            }\n            seqObj = undefined;\n        }\n        else if (uCode >= 0) {  // Regular character\n            var subtable = this.encodeTable[uCode >> 8];\n            if (subtable !== undefined)\n                dbcsCode = subtable[uCode & 0xFF];\n            \n            if (dbcsCode <= SEQ_START) { // Sequence start\n                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];\n                continue;\n            }\n\n            if (dbcsCode == UNASSIGNED && this.gb18030) {\n                // Use GB18030 algorithm to find character(s) to write.\n                var idx = findIdx(this.gb18030.uChars, uCode);\n                if (idx != -1) {\n                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;\n                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;\n                    newBuf[j++] = 0x30 + dbcsCode;\n                    continue;\n                }\n            }\n        }\n\n        // 3. Write dbcsCode character.\n        if (dbcsCode === UNASSIGNED)\n            dbcsCode = this.defaultCharSingleByte;\n        \n        if (dbcsCode < 0x100) {\n            newBuf[j++] = dbcsCode;\n        }\n        else if (dbcsCode < 0x10000) {\n            newBuf[j++] = dbcsCode >> 8;   // high byte\n            newBuf[j++] = dbcsCode & 0xFF; // low byte\n        }\n        else {\n            newBuf[j++] = dbcsCode >> 16;\n            newBuf[j++] = (dbcsCode >> 8) & 0xFF;\n            newBuf[j++] = dbcsCode & 0xFF;\n        }\n    }\n\n    this.seqObj = seqObj;\n    this.leadSurrogate = leadSurrogate;\n    return newBuf.slice(0, j);\n}\n\nDBCSEncoder.prototype.end = function() {\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\n        return; // All clean. Most often case.\n\n    var newBuf = new Buffer(10), j = 0;\n\n    if (this.seqObj) { // We're in the sequence.\n        var dbcsCode = this.seqObj[DEF_CHAR];\n        if (dbcsCode !== undefined) { // Write beginning of the sequence.\n            if (dbcsCode < 0x100) {\n                newBuf[j++] = dbcsCode;\n            }\n            else {\n                newBuf[j++] = dbcsCode >> 8;   // high byte\n                newBuf[j++] = dbcsCode & 0xFF; // low byte\n            }\n        } else {\n            // See todo above.\n        }\n        this.seqObj = undefined;\n    }\n\n    if (this.leadSurrogate !== -1) {\n        // Incomplete surrogate pair - only lead surrogate found.\n        newBuf[j++] = this.defaultCharSingleByte;\n        this.leadSurrogate = -1;\n    }\n    \n    return newBuf.slice(0, j);\n}\n\n// Export for testing\nDBCSEncoder.prototype.findIdx = findIdx;\n\n\n// == Decoder ==================================================================\n\nfunction DBCSDecoder(options, codec) {\n    // Decoder state\n    this.nodeIdx = 0;\n    this.prevBuf = new Buffer(0);\n\n    // Static data\n    this.decodeTables = codec.decodeTables;\n    this.decodeTableSeq = codec.decodeTableSeq;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSDecoder.prototype.write = function(buf) {\n    var newBuf = new Buffer(buf.length*2),\n        nodeIdx = this.nodeIdx, \n        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,\n        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.\n        uCode;\n\n    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.\n        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);\n    \n    for (var i = 0, j = 0; i < buf.length; i++) {\n        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];\n\n        // Lookup in current trie node.\n        var uCode = this.decodeTables[nodeIdx][curByte];\n\n        if (uCode >= 0) { \n            // Normal character, just use it.\n        }\n        else if (uCode === UNASSIGNED) { // Unknown char.\n            // TODO: Callback with seq.\n            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).\n            uCode = this.defaultCharUnicode.charCodeAt(0);\n        }\n        else if (uCode === GB18030_CODE) {\n            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);\n            var idx = findIdx(this.gb18030.gbChars, ptr);\n            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\n        }\n        else if (uCode <= NODE_START) { // Go to next trie node.\n            nodeIdx = NODE_START - uCode;\n            continue;\n        }\n        else if (uCode <= SEQ_START) { // Output a sequence of chars.\n            var seq = this.decodeTableSeq[SEQ_START - uCode];\n            for (var k = 0; k < seq.length - 1; k++) {\n                uCode = seq[k];\n                newBuf[j++] = uCode & 0xFF;\n                newBuf[j++] = uCode >> 8;\n            }\n            uCode = seq[seq.length-1];\n        }\n        else\n            throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\n\n        // Write the character to buffer, handling higher planes using surrogate pair.\n        if (uCode > 0xFFFF) { \n            uCode -= 0x10000;\n            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);\n            newBuf[j++] = uCodeLead & 0xFF;\n            newBuf[j++] = uCodeLead >> 8;\n\n            uCode = 0xDC00 + uCode % 0x400;\n        }\n        newBuf[j++] = uCode & 0xFF;\n        newBuf[j++] = uCode >> 8;\n\n        // Reset trie node.\n        nodeIdx = 0; seqStart = i+1;\n    }\n\n    this.nodeIdx = nodeIdx;\n    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);\n    return newBuf.slice(0, j).toString('ucs2');\n}\n\nDBCSDecoder.prototype.end = function() {\n    var ret = '';\n\n    // Try to parse all remaining chars.\n    while (this.prevBuf.length > 0) {\n        // Skip 1 character in the buffer.\n        ret += this.defaultCharUnicode;\n        var buf = this.prevBuf.slice(1);\n\n        // Parse remaining as usual.\n        this.prevBuf = new Buffer(0);\n        this.nodeIdx = 0;\n        if (buf.length > 0)\n            ret += this.write(buf);\n    }\n\n    this.nodeIdx = 0;\n    return ret;\n}\n\n// Binary search for GB18030. Returns largest i such that table[i] <= val.\nfunction findIdx(table, val) {\n    if (table[0] > val)\n        return -1;\n\n    var l = 0, r = table.length;\n    while (l < r-1) { // always table[l] <= val < table[r]\n        var mid = l + Math.floor((r-l+1)/2);\n        if (table[mid] <= val)\n            l = mid;\n        else\n            r = mid;\n    }\n    return l;\n}\n\n","\"use strict\";\n\n// Description of supported double byte encodings and aliases.\n// Tables are not require()-d until they are needed to speed up library load.\n// require()-s are direct to support Browserify.\n\nmodule.exports = {\n    \n    // == Japanese/ShiftJIS ====================================================\n    // All japanese encodings are based on JIS X set of standards:\n    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.\n    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. \n    //              Has several variations in 1978, 1983, 1990 and 1997.\n    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.\n    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.\n    //              2 planes, first is superset of 0208, second - revised 0212.\n    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)\n\n    // Byte encodings are:\n    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte\n    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.\n    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.\n    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.\n    //               0x00-0x7F       - lower part of 0201\n    //               0x8E, 0xA1-0xDF - upper part of 0201\n    //               (0xA1-0xFE)x2   - 0208 plane (94x94).\n    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).\n    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.\n    //               Used as-is in ISO2022 family.\n    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, \n    //                0201-1976 Roman, 0208-1978, 0208-1983.\n    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.\n    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.\n    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.\n    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.\n    //\n    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.\n    //\n    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html\n\n    'shiftjis': {\n        type: '_dbcs',\n        table: function() { return require('./tables/shiftjis.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n        encodeSkipVals: [{from: 0xED40, to: 0xF940}],\n    },\n    'csshiftjis': 'shiftjis',\n    'mskanji': 'shiftjis',\n    'sjis': 'shiftjis',\n    'windows31j': 'shiftjis',\n    'ms31j': 'shiftjis',\n    'xsjis': 'shiftjis',\n    'windows932': 'shiftjis',\n    'ms932': 'shiftjis',\n    '932': 'shiftjis',\n    'cp932': 'shiftjis',\n\n    'eucjp': {\n        type: '_dbcs',\n        table: function() { return require('./tables/eucjp.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n    },\n\n    // TODO: KDDI extension to Shift_JIS\n    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.\n    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.\n\n\n    // == Chinese/GBK ==========================================================\n    // http://en.wikipedia.org/wiki/GBK\n    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder\n\n    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936\n    'gb2312': 'cp936',\n    'gb231280': 'cp936',\n    'gb23121980': 'cp936',\n    'csgb2312': 'cp936',\n    'csiso58gb231280': 'cp936',\n    'euccn': 'cp936',\n\n    // Microsoft's CP936 is a subset and approximation of GBK.\n    'windows936': 'cp936',\n    'ms936': 'cp936',\n    '936': 'cp936',\n    'cp936': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json') },\n    },\n\n    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.\n    'gbk': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n    },\n    'xgbk': 'gbk',\n    'isoir58': 'gbk',\n\n    // GB18030 is an algorithmic extension of GBK.\n    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder\n    // http://icu-project.org/docs/papers/gb18030.html\n    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml\n    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0\n    'gb18030': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n        gb18030: function() { return require('./tables/gb18030-ranges.json') },\n        encodeSkipVals: [0x80],\n        encodeAdd: {'€': 0xA2E3},\n    },\n\n    'chinese': 'gb18030',\n\n\n    // == Korean ===============================================================\n    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.\n    'windows949': 'cp949',\n    'ms949': 'cp949',\n    '949': 'cp949',\n    'cp949': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp949.json') },\n    },\n\n    'cseuckr': 'cp949',\n    'csksc56011987': 'cp949',\n    'euckr': 'cp949',\n    'isoir149': 'cp949',\n    'korean': 'cp949',\n    'ksc56011987': 'cp949',\n    'ksc56011989': 'cp949',\n    'ksc5601': 'cp949',\n\n\n    // == Big5/Taiwan/Hong Kong ================================================\n    // There are lots of tables for Big5 and cp950. Please see the following links for history:\n    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html\n    // Variations, in roughly number of defined chars:\n    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT\n    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/\n    //  * Big5-2003 (Taiwan standard) almost superset of cp950.\n    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.\n    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. \n    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.\n    //    Plus, it has 4 combining sequences.\n    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299\n    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.\n    //    Implementations are not consistent within browsers; sometimes labeled as just big5.\n    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.\n    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31\n    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.\n    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt\n    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt\n    // \n    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder\n    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.\n\n    'windows950': 'cp950',\n    'ms950': 'cp950',\n    '950': 'cp950',\n    'cp950': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json') },\n    },\n\n    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.\n    'big5': 'big5hkscs',\n    'big5hkscs': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json').concat(require('./tables/big5-added.json')) },\n        encodeSkipVals: [0xa2cc],\n    },\n\n    'cnbig5': 'big5hkscs',\n    'csbig5': 'big5hkscs',\n    'xxbig5': 'big5hkscs',\n};\n","\"use strict\";\n\nvar Buffer = require(\"buffer\").Buffer,\n    Transform = require(\"stream\").Transform;\n\n\n// == Exports ==================================================================\nmodule.exports = function(iconv) {\n    \n    // Additional Public API.\n    iconv.encodeStream = function encodeStream(encoding, options) {\n        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n    }\n\n    iconv.decodeStream = function decodeStream(encoding, options) {\n        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n    }\n\n    iconv.supportsStreams = true;\n\n\n    // Not published yet.\n    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;\n    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;\n    iconv._collect = IconvLiteDecoderStream.prototype.collect;\n};\n\n\n// == Encoder stream =======================================================\nfunction IconvLiteEncoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n    Transform.call(this, options);\n}\n\nIconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteEncoderStream }\n});\n\nIconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (typeof chunk != 'string')\n        return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype.collect = function(cb) {\n    var chunks = [];\n    this.on('error', cb);\n    this.on('data', function(chunk) { chunks.push(chunk); });\n    this.on('end', function() {\n        cb(null, Buffer.concat(chunks));\n    });\n    return this;\n}\n\n\n// == Decoder stream =======================================================\nfunction IconvLiteDecoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.encoding = this.encoding = 'utf8'; // We output strings.\n    Transform.call(this, options);\n}\n\nIconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteDecoderStream }\n});\n\nIconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (!Buffer.isBuffer(chunk))\n        return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res, this.encoding);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res, this.encoding);                \n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype.collect = function(cb) {\n    var res = '';\n    this.on('error', cb);\n    this.on('data', function(chunk) { res += chunk; });\n    this.on('end', function() {\n        cb(null, res);\n    });\n    return this;\n}\n\n","\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// == Extend Node primitives to use iconv-lite =================================\n\nmodule.exports = function (iconv) {\n    var original = undefined; // Place to keep original methods.\n\n    // Node authors rewrote Buffer internals to make it compatible with\n    // Uint8Array and we cannot patch key functions since then.\n    iconv.supportsNodeEncodingsExtension = !(new Buffer(0) instanceof Uint8Array);\n\n    iconv.extendNodeEncodings = function extendNodeEncodings() {\n        if (original) return;\n        original = {};\n\n        if (!iconv.supportsNodeEncodingsExtension) {\n            console.error(\"ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node\");\n            console.error(\"See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility\");\n            return;\n        }\n\n        var nodeNativeEncodings = {\n            'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, \n            'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,\n        };\n\n        Buffer.isNativeEncoding = function(enc) {\n            return enc && nodeNativeEncodings[enc.toLowerCase()];\n        }\n\n        // -- SlowBuffer -----------------------------------------------------------\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        original.SlowBufferToString = SlowBuffer.prototype.toString;\n        SlowBuffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.SlowBufferWrite = SlowBuffer.prototype.write;\n        SlowBuffer.prototype.write = function(string, offset, length, encoding) {\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferWrite.call(this, string, offset, length, encoding);\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n        }\n\n        // -- Buffer ---------------------------------------------------------------\n\n        original.BufferIsEncoding = Buffer.isEncoding;\n        Buffer.isEncoding = function(encoding) {\n            return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);\n        }\n\n        original.BufferByteLength = Buffer.byteLength;\n        Buffer.byteLength = SlowBuffer.byteLength = function(str, encoding) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferByteLength.call(this, str, encoding);\n\n            // Slow, I know, but we don't have a better way yet.\n            return iconv.encode(str, encoding).length;\n        }\n\n        original.BufferToString = Buffer.prototype.toString;\n        Buffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.BufferWrite = Buffer.prototype.write;\n        Buffer.prototype.write = function(string, offset, length, encoding) {\n            var _offset = offset, _length = length, _encoding = encoding;\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferWrite.call(this, string, _offset, _length, _encoding);\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n\n            // TODO: Set _charsWritten.\n        }\n\n\n        // -- Readable -------------------------------------------------------------\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            original.ReadableSetEncoding = Readable.prototype.setEncoding;\n            Readable.prototype.setEncoding = function setEncoding(enc, options) {\n                // Use our own decoder, it has the same interface.\n                // We cannot use original function as it doesn't handle BOM-s.\n                this._readableState.decoder = iconv.getDecoder(enc, options);\n                this._readableState.encoding = enc;\n            }\n\n            Readable.prototype.collect = iconv._collect;\n        }\n    }\n\n    // Remove iconv-lite Node primitive extensions.\n    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {\n        if (!iconv.supportsNodeEncodingsExtension)\n            return;\n        if (!original)\n            throw new Error(\"require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.\")\n\n        delete Buffer.isNativeEncoding;\n\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        SlowBuffer.prototype.toString = original.SlowBufferToString;\n        SlowBuffer.prototype.write = original.SlowBufferWrite;\n\n        Buffer.isEncoding = original.BufferIsEncoding;\n        Buffer.byteLength = original.BufferByteLength;\n        Buffer.prototype.toString = original.BufferToString;\n        Buffer.prototype.write = original.BufferWrite;\n\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            Readable.prototype.setEncoding = original.ReadableSetEncoding;\n            delete Readable.prototype.collect;\n        }\n\n        original = undefined;\n    }\n}\n","\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = new Buffer(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = (''+encoding).toLowerCase().replace(/[^0-9a-z]|:\\d{4}$/g, \"\");\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n"],"sourceRoot":""}